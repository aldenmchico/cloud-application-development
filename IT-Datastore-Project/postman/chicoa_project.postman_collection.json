{
	"info": {
		"_postman_id": "d3639c44-2b68-42c7-87db-61f4e635e5a8",
		"name": "chicoa_project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30442966"
	},
	"item": [
		{
			"name": "get users",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"UT Austin\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   console.log(self_url)",
							"   console.log(pm.response.json()[\"self\"])",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"UT Austin\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"UT Austin\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"UT Austin\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"UT Austin\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"UT Austin\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with same company user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The company provided in request already exists for this user\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"UT Austin\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with same company user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The company provided in request already exists for this user\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"UT Austin\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with invalid request content-type header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Server only accepts application/json data.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Apple\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object contains an invalid attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"invalid\": \"This won't work\",\n    \"company\": \"Tesla\",\n    \"city\": \"New York\",\n    \"general_manager\": \"Jerry Spellinger\",\n    \"phone_number\": \"111-111-1111\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with invalid company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's company attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"a\",\n    \"city\": \"12345\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gale Spites\",\n    \"phone_number\": \"555-555-5555\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with invalid city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's city attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"12345\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gale Spites\",\n    \"phone_number\": \"555-555-5555\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with invalid state",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's state attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Austin\",\n    \"state\": \"FF\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with invalid general manager",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's general manager attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"12345\",\n    \"phone_number\": \"555-555-5555\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with invalid phone number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's phone number attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gale Spites\",\n    \"phone_number\": \"ABCDE\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"city\": \"Harrington\",\n    \"general_manager\": \"Garry Blue\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"UT Austin\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"UT Austin\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office invalid no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    //Check for 404 response",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No office with this office_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{invalid_office_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{invalid_office_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Tesla\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Indianapolis\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"IN\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Ronald Ruckus\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"512-152-9514\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Tesla\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Indianapolis\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"IN\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Ronald Ruckus\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"512-152-9514\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office invalid no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    //Check for 404 response",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No office with this office_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"company\": \"Pepsi Co.\",\r\n    \"city\": \"Indianapolis\",\r\n    \"state\": \"IN\",\r\n    \"general_manager\": \"Ronald Ruckus\",\r\n    \"phone_number\": \"512-152-9514\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/offices/{{invalid_office_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{invalid_office_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid request content-type header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Server only accepts application/json data.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with same company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The company provided in request already exists for this user\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Tesla\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object contains an invalid attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"invalid\": \"This won't work\",\n    \"company\": \"Pepsi Co.\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's city attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\",\n    \"city\": \"12345\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid state",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's state attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"FF\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid general manager",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's general manager attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"12345\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid phone number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's phone number attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"ABCDEF\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office company only user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Pepsi Co.\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Indianapolis\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"IN\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Ronald Ruckus\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"512-152-9514\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office company only user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Pepsi Co.\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Indianapolis\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"IN\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Ronald Ruckus\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"512-152-9514\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office company only invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office company only no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office company only user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office company only user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Pepsi Co.\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office city only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Pepsi Co.\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"San Jose\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"IN\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Ronald Ruckus\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"512-152-9514\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"city\": \"San Jose\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office state only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Pepsi Co.\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"San Jose\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"CA\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Ronald Ruckus\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"512-152-9514\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"state\": \"CA\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office general manager only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Pepsi Co.\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"San Jose\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"CA\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Cory Smith\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"512-152-9514\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"general_manager\": \"Cory Smith\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office phone only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Pepsi Co.\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"San Jose\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"CA\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Cory Smith\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"578-154-1423\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"phone_number\": \"578-154-1423\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office city and state only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Pepsi Co.\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Baltimore\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"MD\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Cory Smith\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"578-154-1423\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"city\": \"Baltimore\",\n    \"state\": \"MD\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office gm and phone only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Pepsi Co.\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Baltimore\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"MD\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Jarrod Henry\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"319-513-1423\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"general_manager\": \"Jarrod Henry\",\n    \"phone_number\": \"319-513-1423\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office all attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"NASCAR\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Indianapolis\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"IN\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Ronald Ruckus\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"512-152-9514\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"NASCAR\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    //Check for 404 response",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No office with this office_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"NASCAR\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{invalid_office_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{invalid_office_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office with same company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The company provided in request already exists for this user\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"NASCAR\",\n    \"city\": \"Indianapolis\",\n    \"state\": \"IN\",\n    \"general_manager\": \"Ronald Ruckus\",\n    \"phone_number\": \"512-152-9514\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office with invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object contains an invalid attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"invalid\": \"This won't work\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office with invalid company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's company attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"a\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office with invalid city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's city attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"city\": \"12345\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office with invalid state",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's state attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"state\": \"FF\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office with invalid general manager",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's general manager attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"general_manager\": \"12345\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office with invalid phone number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's phone number attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"phone_number\": \"ABCDEF\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    //Check for appropriate 404 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No office with this office_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{invalid_office_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{invalid_office_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office01 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_01_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Yahoo!\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Yahoo!\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office02 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_02_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Jack Daniels\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Lexington\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"KY\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Lance Shrever\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"613-531-3566\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Jack Daniels\",\n    \"city\": \"Lexington\",\n    \"state\": \"KY\",\n    \"general_manager\": \"Lance Shrever\",\n    \"phone_number\": \"613-531-3566\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office03 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_03_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"CBS\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"New York\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"NY\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Killian Reyes\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"361-351-3635\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"CBS\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"general_manager\": \"Killian Reyes\",\n    \"phone_number\": \"361-351-3635\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office04 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_04_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Northrop Grumman\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Shreveport\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"LA\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Caroline Reeves\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"332-143-5136\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Northrop Grumman\",\n    \"city\": \"Shreveport\",\n    \"state\": \"LA\",\n    \"general_manager\": \"Caroline Reeves\",\n    \"phone_number\": \"332-143-5136\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office05 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_05_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Boeing\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Seattle\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"WA\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Sharon Blanche\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"142-225-1526\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Boeing\",\n    \"city\": \"Seattle\",\n    \"state\": \"WA\",\n    \"general_manager\": \"Sharon Blanche\",\n    \"phone_number\": \"142-225-1526\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office06 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_06_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Seneo\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Madison\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"WI\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Raymond Fellows\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"163-342-1573\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Seneo\",\n    \"city\": \"Madison\",\n    \"state\": \"WI\",\n    \"general_manager\": \"Raymond Fellows\",\n    \"phone_number\": \"163-342-1573\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office01 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_01_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Yahoo!\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Yahoo!\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office02 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_02_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Jack Daniels\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Lexington\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"KY\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Lance Shrever\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"613-531-3566\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Jack Daniels\",\n    \"city\": \"Lexington\",\n    \"state\": \"KY\",\n    \"general_manager\": \"Lance Shrever\",\n    \"phone_number\": \"613-531-3566\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office03 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_03_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"CBS\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"New York\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"NY\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Killian Reyes\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"361-351-3635\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"CBS\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"general_manager\": \"Killian Reyes\",\n    \"phone_number\": \"361-351-3635\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office04 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_04_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Northrop Grumman\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Shreveport\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"LA\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Caroline Reeves\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"332-143-5136\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Northrop Grumman\",\n    \"city\": \"Shreveport\",\n    \"state\": \"LA\",\n    \"general_manager\": \"Caroline Reeves\",\n    \"phone_number\": \"332-143-5136\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office05 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_05_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Boeing\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Seattle\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"WA\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Sharon Blanche\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"142-225-1526\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Boeing\",\n    \"city\": \"Seattle\",\n    \"state\": \"WA\",\n    \"general_manager\": \"Sharon Blanche\",\n    \"phone_number\": \"142-225-1526\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office06 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_06_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Seneo\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Madison\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"WI\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Raymond Fellows\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"163-342-1573\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Seneo\",\n    \"city\": \"Madison\",\n    \"state\": \"WI\",\n    \"general_manager\": \"Raymond Fellows\",\n    \"phone_number\": \"163-342-1573\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office first page user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"next_office_cursor_user_1\", pm.response.json()[\"cursor\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of offices in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"offices\"].length).to.equal(5);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office next page user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of offices in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"offices\"].length).to.equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices?cursor={{next_office_cursor_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					],
					"query": [
						{
							"key": "cursor",
							"value": "{{next_office_cursor_user_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get office first page user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"next_office_cursor_user_2\", pm.response.json()[\"cursor\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of offices in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"offices\"].length).to.equal(5);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office next page user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of offices in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"offices\"].length).to.equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices?cursor={{next_office_cursor_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					],
					"query": [
						{
							"key": "cursor",
							"value": "{{next_office_cursor_user_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get office first page invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office first page no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office01 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_01_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_01_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office02 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_02_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_02_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office03 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_03_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_03_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office04 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_04_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_04_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office05 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_05_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_05_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office06 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_06_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_06_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office01 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_01_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_01_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office02 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_02_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_02_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office03 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_03_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_03_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office04 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_04_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_04_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office05 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_05_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_05_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office06 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_06_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_06_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "office delete 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 not acceptable\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"pm.test(\"405 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});",
							"",
							"pm.test(\"accept header is valid\", function(){",
							"    const accepts_header = pm.response.headers.get(\"accept\");",
							"    pm.expect(accepts_header).to.eq(\"GET, POST\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "office put 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 not acceptable\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"pm.test(\"405 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});",
							"",
							"pm.test(\"accept header is valid\", function(){",
							"    const accepts_header = pm.response.headers.get(\"accept\");",
							"    pm.expect(accepts_header).to.eq(\"GET, POST\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"   pm.expect(pm.response.json()[\"employer\"]).to.eq(null);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"   pm.expect(pm.response.json()[\"employer\"]).to.eq(null);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee with invalid request content-type header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Server only accepts application/json data.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee with invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object contains an invalid attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"invalid\" : \"NOPE\",\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee with invalid first name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's first name attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"12345\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee with invalid last name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's last name attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"12345\",\n    \"pay_rate\": \"42.50\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee with invalid pay rate (Letters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's pay rate attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": \"ABCDEF\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee with invalid pay rate (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's pay rate attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": -42.50\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    //Check for 404 response",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No employee with this employee_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{invalid_employee_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{invalid_employee_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Garry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Shams\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"50.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Garry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Shams\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"50.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    //Check for 404 response",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No employee with this employee_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\": \"Garry\",\r\n    \"last_name\": \"Shams\",\r\n    \"pay_rate\": 50.00\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/employees/{{invalid_employee_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{invalid_employee_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee with invalid request content-type header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Server only accepts application/json data.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee with invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object contains an invalid attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"invalid\": \"NOPE\",\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee with invalid first name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's first name attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"12345\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid last name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's last name attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"12345\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid pay rate (Letters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's pay rate attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": \"ABCDEF\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put office with invalid pay rate (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's pay rate attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\",\n    \"pay_rate\": \"-50.00\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put employee with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 400 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee first name only user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Spencer\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Shams\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"50.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Spencer\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee first name only user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Spencer\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Shams\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"50.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Spencer\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee first name only invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Spencer\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee first name only no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Spencer\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee first name only user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Spencer\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee first name only user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Spencer\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee last name only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Spencer\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Whitaker\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"50.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"last_name\": \"Whitaker\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee pay rate only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Spencer\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Whitaker\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"40.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pay_rate\": 40.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch office first and last name only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Garry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Shams\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"40.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Shams\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee first name and pay rate only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 200 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Rome\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Shams\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"50.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Rome\",\n    \"pay_rate\": 50.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee all attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Garry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Sherrington\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"55.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Sherrington\",\n    \"pay_rate\": 55.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Garry\",\n    \"last_name\": \"Sherrington\",\n    \"pay_rate\": 55.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{invalid_employee_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{invalid_employee_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee with invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object contains an invalid attribute\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"invalid\": \"This won't work\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee with invalid first name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's first name attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"12345\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee with invalid last name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's last name attribute is not valid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"last_name\": \"12345\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee with invalid pay rate (Letters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's pay rate attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pay_rate\": \"ABCDEF\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch employee with invalid pay rate (Negative)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object's pay rate attribute is not valid\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"pay_rate\": -55.00\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(403);",
							"});",
							"pm.test(\"403 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    //Check for appropriate 404 status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     //Check for appropriate error message",
							"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No employee with this employee_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{invalid_employee_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{invalid_employee_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"401 error message\", function () {",
							"     //Check for appropriate error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee01 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_01_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Josh\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Hart\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"15.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Josh\",\n    \"last_name\": \"Hart\",\n    \"pay_rate\": 15.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee02 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_02_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harold\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Catcher\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"25.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harold\",\n    \"last_name\": \"Catcher\",\n    \"pay_rate\": 25.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee03 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_03_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Sharon\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Vu\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"30.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Sharon\",\n    \"last_name\": \"Vu\",\n    \"pay_rate\": 30.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee04 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_04_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Ronald\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Charter\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"25.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Ronald\",\n    \"last_name\": \"Charter\",\n    \"pay_rate\": 25.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee05 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_05_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Jharen\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Speights\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"20.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Jharen\",\n    \"last_name\": \"Speights\",\n    \"pay_rate\": 20.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee06 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_06_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Carrie\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Niller\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"40.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Carrie\",\n    \"last_name\": \"Niller\",\n    \"pay_rate\": 40.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee01 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_01_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Josh\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Hart\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"15.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Josh\",\n    \"last_name\": \"Hart\",\n    \"pay_rate\": 15.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee02 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_02_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harold\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Catcher\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"25.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harold\",\n    \"last_name\": \"Catcher\",\n    \"pay_rate\": 25.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee03 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_03_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Sharon\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Vu\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"30.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Sharon\",\n    \"last_name\": \"Vu\",\n    \"pay_rate\": 30.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee04 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_04_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Ronald\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Charter\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"25.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Ronald\",\n    \"last_name\": \"Charter\",\n    \"pay_rate\": 25.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee05 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_05_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Jharen\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Speights\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"20.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Jharen\",\n    \"last_name\": \"Speights\",\n    \"pay_rate\": 20.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee06 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_06_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Carrie\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Niller\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"40.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Carrie\",\n    \"last_name\": \"Niller\",\n    \"pay_rate\": 40.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employees first page user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"next_employee_cursor_user_1\", pm.response.json()[\"cursor\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of employees in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"employees\"].length).to.equal(5);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employees next page user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of employees in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"employees\"].length).to.equal(1);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees?cursor={{next_employee_cursor_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					],
					"query": [
						{
							"key": "cursor",
							"value": "{{next_employee_cursor_user_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get employees first page user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"next_employee_cursor_user_2\", pm.response.json()[\"cursor\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of employees in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"employees\"].length).to.equal(5);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employees next page user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"   //Check for appropriate 200 status code",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"only correct number of employees in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json()[\"employees\"].length).to.equal(1);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees?cursor={{next_employee_cursor_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					],
					"query": [
						{
							"key": "cursor",
							"value": "{{next_employee_cursor_user_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee01 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_01_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_01_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee02 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_02_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_02_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee03 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_03_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_03_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee04 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_04_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_04_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee05 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_05_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_05_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee06 user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_06_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_06_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee01 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_01_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_01_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee02 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_02_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_02_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee03 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_03_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_03_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee04 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_04_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_04_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee05 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_05_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_05_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee06 user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_06_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_06_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "employees delete 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 not acceptable\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"pm.test(\"405 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});",
							"",
							"pm.test(\"accept header is valid\", function(){",
							"    const accepts_header = pm.response.headers.get(\"accept\");",
							"    pm.expect(accepts_header).to.eq(\"GET, POST\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "employees put 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"405 not acceptable\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"pm.test(\"405 error message\", function () {",
							"     //Check for error message",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Not Acceptable\");",
							"});",
							"",
							"pm.test(\"accept header is valid\", function(){",
							"    const accepts_header = pm.response.headers.get(\"accept\");",
							"    pm.expect(accepts_header).to.eq(\"GET, POST\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office_assign user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_assign_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Texas Tech\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   pm.expect(pm.response.json()[\"employees\"].length).to.eq(0);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Texas Tech\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee_assign user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_assign_user_1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"   pm.expect(pm.response.json()[\"employer\"]).to.eq(null);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office_assign user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_assign_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Texas Tech\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   pm.expect(pm.response.json()[\"employees\"].length).to.eq(0);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Texas Tech\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee_assign user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_assign_user_2\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"   pm.expect(pm.response.json()[\"employer\"]).to.eq(null);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harry\",\n    \"last_name\": \"Rogers\",\n    \"pay_rate\": 42.50\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee user 1 to office user 1 as invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"pm.test(\"401 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee user 1 to office user 1  no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"pm.test(\"401 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee user 1 to office user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"403 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee user 2 to office user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"403 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_2}}/employees/{{employee_id_assign_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_2}}",
						"employees",
						"{{employee_id_assign_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee user 1 to office user 2 as user 1 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"403 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_2}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_2}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee user 2 to office user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"403 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee to office",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee already assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 forbidden\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"403 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The employee is already assigned a company\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee to invalid company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified employee and/or office does not exist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{invalid_office_id}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{invalid_office_id}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign invalid employee to company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified employee and/or office does not exist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{invalid_employee_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{invalid_employee_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign invalid employee to invalid company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified employee and/or office does not exist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{invalid_office_id}}/employees/{{invalid_employee_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{invalid_office_id}}",
						"employees",
						"{{invalid_employee_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office_assign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Texas Tech\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"",
							"   // Check employees attributes",
							"   pm.expect(pm.response.json()[\"employees\"][0][\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"employees\"][0][\"last_name\"]).to.eq(\"Rogers\");",
							"   // Check the employee url is correct",
							"   const employee_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.environment.get(\"employee_id_assign_user_1\");",
							"   pm.expect(pm.response.json()[\"employees\"][0][\"self\"]).to.eq(employee_url);",
							"   pm.expect(pm.response.json()[\"employees\"][0][\"id\"]).to.eq(pm.environment.get(\"employee_id_assign_user_1\"));",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee_assign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"",
							"   // Check employer attributes",
							"   pm.expect(pm.response.json()[\"employer\"][\"company\"]).to.eq(\"Texas Tech\");",
							"   // Check the employer url is correct",
							"   const employer_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.environment.get(\"office_id_assign_user_1\");",
							"   pm.expect(pm.response.json()[\"employer\"][\"self\"]).to.eq(employer_url);",
							"   pm.expect(pm.response.json()[\"employer\"][\"id\"]).to.eq(pm.environment.get(\"office_id_assign_user_1\"));",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove employee user 1 from office user 1 as invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"pm.test(\"401 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove employee user 1 from office user 1 no user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"pm.test(\"401 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid token...\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove employee user 1 from office user 1 as user 2 (forbidden)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for 201 status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"pm.test(\"403 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Forbidden\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove employee from invalid company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified employee and/or office does not exist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{invalid_office_id}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{invalid_office_id}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove invalid employee from company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified employee and/or office does not exist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{invalid_employee_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{invalid_employee_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove invalid employee from invalid company",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified employee and/or office does not exist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{invalid_office_id}}/employees/{{invalid_employee_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{invalid_office_id}}",
						"employees",
						"{{invalid_employee_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove employee from office",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove employee from office not assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"404 error message\", function () {\r",
							"     //Check for appropriate error message\r",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No office with this office_id is loaded with the employee with this employee_id\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office_assign post-remove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Texas Tech\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   pm.expect(pm.response.json()[\"employees\"].length).to.eq(0);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee_assign post-remove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_assign\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"   pm.expect(pm.response.json()[\"employer\"]).to.eq(null);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign employee to office",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}",
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "check office_assign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Texas Tech\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"",
							"   // Check employees attributes",
							"   pm.expect(pm.response.json()[\"employees\"][0][\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"employees\"][0][\"last_name\"]).to.eq(\"Rogers\");",
							"   // Check the employee url is correct",
							"   const employee_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.environment.get(\"employee_id_assign_user_1\");",
							"   pm.expect(pm.response.json()[\"employees\"][0][\"self\"]).to.eq(employee_url);",
							"   pm.expect(pm.response.json()[\"employees\"][0][\"id\"]).to.eq(pm.environment.get(\"employee_id_assign_user_1\"));",
							"",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "check employee_assign",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harry\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Rogers\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"42.50\");",
							"",
							"   // Check employer attributes",
							"   pm.expect(pm.response.json()[\"employer\"][\"company\"]).to.eq(\"Texas Tech\");",
							"   // Check the employer url is correct",
							"   const employer_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.environment.get(\"office_id_assign_user_1\");",
							"   pm.expect(pm.response.json()[\"employer\"][\"self\"]).to.eq(employer_url);",
							"   pm.expect(pm.response.json()[\"employer\"][\"id\"]).to.eq(pm.environment.get(\"office_id_assign_user_1\"));",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee assign user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office_assign post-delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Texas Tech\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   pm.expect(pm.response.json()[\"employees\"].length).to.eq(0);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office_assign user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee assign user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_assign_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_assign_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office_assign user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_assign_user_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_assign_user_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_01\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Josh\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Hart\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"15.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Josh\",\n    \"last_name\": \"Hart\",\n    \"pay_rate\": 15.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_02\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Harold\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Catcher\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"25.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Harold\",\n    \"last_name\": \"Catcher\",\n    \"pay_rate\": 25.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_03\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Sharon\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Vu\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"30.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Sharon\",\n    \"last_name\": \"Vu\",\n    \"pay_rate\": 30.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add employee04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_04\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"first_name\"]).to.eq(\"Ronald\");",
							"   pm.expect(pm.response.json()[\"last_name\"]).to.eq(\"Charter\");",
							"   pm.expect(pm.response.json()[\"pay_rate\"]).to.eq(\"25.00\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/employees/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Ronald\",\n    \"last_name\": \"Charter\",\n    \"pay_rate\": 25.00\n}"
				},
				"url": {
					"raw": "{{app_url}}/employees",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_01\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Yahoo!\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Austin\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"TX\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Gerry Golf\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"123-445-6723\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Yahoo!\",\n    \"city\": \"Austin\",\n    \"state\": \"TX\",\n    \"general_manager\": \"Gerry Golf\",\n    \"phone_number\": \"123-445-6723\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "add office02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"office_id_02\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"company\"]).to.eq(\"Jack Daniels\");",
							"   pm.expect(pm.response.json()[\"city\"]).to.eq(\"Lexington\");",
							"   pm.expect(pm.response.json()[\"state\"]).to.eq(\"KY\");",
							"   pm.expect(pm.response.json()[\"general_manager\"]).to.eq(\"Lance Shrever\");",
							"   pm.expect(pm.response.json()[\"phone_number\"]).to.eq(\"613-531-3566\");",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"location header is valid\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/offices/\" + pm.response.json()[\"id\"];",
							"    const location_header = pm.response.headers.get(\"Location\");",
							"    pm.expect(location_header).to.eq(self_url);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"Jack Daniels\",\n    \"city\": \"Lexington\",\n    \"state\": \"KY\",\n    \"general_manager\": \"Lance Shrever\",\n    \"phone_number\": \"613-531-3566\"\n}\n"
				},
				"url": {
					"raw": "{{app_url}}/offices",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee01 to office01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_01}}/employees/{{employee_id_01}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_01}}",
						"employees",
						"{{employee_id_01}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee02 to office01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_01}}/employees/{{employee_id_02}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_01}}",
						"employees",
						"{{employee_id_02}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee03 to office02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_02}}/employees/{{employee_id_03}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_02}}",
						"employees",
						"{{employee_id_03}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign employee04 to office02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_02}}/employees/{{employee_id_04}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_02}}",
						"employees",
						"{{employee_id_04}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office_01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   // Check employees attributes",
							"   pm.expect(pm.response.json()[\"employees\"].length).to.eq(2);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_01}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_01}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office_02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   // Check employees attributes",
							"   pm.expect(pm.response.json()[\"employees\"].length).to.eq(2);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_02}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_02}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_01}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_01}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_02}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_02}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get office_01 post employee delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for success 200 response code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"employees\"].length).to.eq(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_01}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_01}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office_01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_01}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_01}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete office_02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/offices/{{office_id_02}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"offices",
						"{{office_id_02}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee03 post office delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_assign\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"employer\"]).to.eq(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_03}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_03}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get employee04 post office delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Set office id environment variable from response",
							"pm.environment.set(\"employee_id_assign\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"    //Check for 201 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"employer\"]).to.eq(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_04}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_04}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_03}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_03}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete employee04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    //Check for appropriate 204 code",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/employees/{{employee_id_04}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"employees",
						"{{employee_id_04}}"
					]
				}
			},
			"response": []
		}
	]
}